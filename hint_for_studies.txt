path(<str:temp_test>, views.horoscope, name=temp_test) - переменная, ссылка на вьюшку, имя для ссылки

from django.http import HttpResponseRedirect - перенаправляет запрос в случае 1/Овен...2/Телец
from django.urls import reverse
redirect_url = reverse('horoscope_name', args=(name_zodiac,)) - сконструированный url
return HttpResponseRedirect(redirect_url)

MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--MODELS--

from django.db import models

class News(models.Model):
    title = models.CharField(max_length=150, db_index=True) - небольшое текстовое поле, для быстрого поиска
    content = models.TextField(blank=True) -- Большое текстовое поле. blank -- обязательно/необязательно для заполнения
    created_at = models.DateTimeField(auto_now_add=True) -- DateTime. auto_now_add -- создаётся один раз при создании
    updated_at = models.DateTimeField(auto_now=True) -- DateTime. auto_now -- обновляется при изменении
    photo = models.ImageField(upload_to='photos/%Y/%m/%d')
    is_published = models.BooleanField(default=True)

    def __str__(self): -- что бы возвращалось имя
        return self.title

class Meta: -- подкласс в моделей в models.py
    verbose_name = 'Новость' -- наименование модели в единственном числе
    verbose_name_plural = 'Новости' -- наименование модели во множественном числе
    ordering = ['-created_at', 'title'] - сортировка моделей, слева на право

class Category(models.Model): -- связь моделей
    title = models.CharField(max_lenght=150, db_index=True) -- индекс для быстрой связи

Связь с БД

>>>>>>> python manage.py shell -- переход в терминал джанго
>>>>>>> from news.models import News -- импорт моделей с которыми работать
In [2]: News(title='Новость 1', content='Контент новости 1') -- ленивый SQL запрос
In [7]: news1.save() -- выполнение SQL запроса
In [8]: news1.id -- посмотреть какой ID присовен
Out[8]: 1

In [9]: from django.db import connection -- список с выполненными SQL запросами
In [10]: connection.queries

news4 = News.objects.create(title='Новость 4', content='Контент новости 4') -- альтернативный метод создания

News.objects.all() -- все созданные объекты в моделе
News.objects.filter(title='News 5') -- возвращает отфилтрованный запрос
News.objects.get(pk=1) -- возвращает одну запись

News.objects.get(pk=4)
news4 = _
news4.title = 'Новость 4' -- изменение записи
news5.save()

News.objects.order_by('title') -- сортировка как в SQL
News.objects.order_by('-title')
News.objects.exclude(title = 'News 5') -- всё за исключением

ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--ADMIN--

python manage.py createsuperuser

from .models import News
class NewsAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'created_at', 'updated_at', 'is_published') -- поля отображаемые в admin
    list_display_links = ('id', 'title') -- что будет кликабельной ссылкой
    search_fields = ('title', 'content') -- по каким полям можно производить поиск
    list_editable = ('is_published', ) -- быстрое редактировение на странице админки
    list_filter = ('is_published', 'category') -- добавление фильтров по выбраным категориям

admin.site.register(News) -- регистрация приложения для админке в admin.py
admin.site.register(Category)


https://getbootstrap.com/docs/5.1/components/card/
